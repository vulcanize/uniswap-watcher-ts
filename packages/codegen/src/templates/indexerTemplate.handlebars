//
// Copyright 2021 Vulcanize, Inc.
//

import assert from 'assert';
import { JsonFragment } from '@ethersproject/abi';
import { BigNumber, ethers, Contract } from 'ethers';
import { BaseProvider } from '@ethersproject/providers';
import { PubSub } from 'apollo-server-express';

import { EthClient } from '@vulcanize/ipld-eth-client';
import { getStorageValue, GetStorageAt, StorageLayout } from '@vulcanize/solidity-mapper';

interface Artifacts {
  abi: JsonFragment[];
  storageLayout: StorageLayout;
}

export interface ValueResult {
  value: string | bigint;
  proof?: {
    data: string;
  }
}

export class Indexer {
  _ethClient: EthClient
  _pubsub: PubSub
  _getStorageAt: GetStorageAt
  _ethProvider: BaseProvider

  _abi: JsonFragment[]
  _storageLayout: StorageLayout
  _contract: ethers.utils.Interface
  _serverMode: string

  constructor (ethClient: EthClient, ethProvider: BaseProvider, pubsub: PubSub, artifacts: Artifacts, serverMode: string) {
    assert(ethClient);
    assert(pubsub);
    assert(artifacts);

    const { abi, storageLayout } = artifacts;

    assert(abi);
    assert(storageLayout);

    this._ethClient = ethClient;
    this._ethProvider = ethProvider;
    this._pubsub = pubsub;
    this._getStorageAt = this._ethClient.getStorageAt.bind(this._ethClient);
    this._serverMode = serverMode;

    this._abi = abi;
    this._storageLayout = storageLayout;

    this._contract = new ethers.utils.Interface(this._abi);
  }

  getEventIterator (): AsyncIterator<any> {
    return this._pubsub.asyncIterator(['event']);
  }

  {{#each queries as | query |}}
  async {{query.name}} (blockHash: string, contractAddress: string
    {{~#each query.params}}, {{this.name~}}: {{this.type~}} {{/each}}): Promise<ValueResult> {
    const contract = new Contract(contractAddress, this._abi, this._ethProvider);
    let value = null;

    {{~#if query.params}}

    const { block: { number } } = await this._ethClient.getBlockByHash(blockHash);
    const blockNumber = BigNumber.from(number).toNumber();
    value = await contract.{{query.name}}(
    {{~#each query.params}}{{this.name}}, {{/each}}{ blockTag: blockNumber });
    {{else}}

    value = await contract.{{query.name}}();
    {{/if}}

    {{~#compare query.returnType 'bigint'}}

    value = value.toString();
    value = BigInt(value);
    {{/compare}}

    const result: ValueResult = { value };
    return result;
  }

  {{/each}}
  async _getStorageValue (blockHash: string, contractAddress: string, variable: string, ...mappingKeys: string[]): Promise<ValueResult> {
    return getStorageValue(
      this._storageLayout,
      this._getStorageAt,
      blockHash,
      contractAddress,
      variable,
      ...mappingKeys
    );
  }
}
